<?php

use Models; // para usar el modelo de usuario
use Respect\Validation\Validator as valida; // para usar el validador de Respect

class Usuario extends Controller
{

    /**
     * Obtiene los atributos para el método http POST 
     * para crear/actualizar un usuario
     *
     */
    public function getAtr()
    {
        $atr = [
            'id' => $this->httpPost('id'),
            'nombre' => $this->httpPost('nombre'),
            'correo' => $this->httpPost('correo'),
            'clave_acceso' => $this->httpPost('clave_acceso')
        ];
        return $atr;
    }

    /**
     * Hace las validaciones para un POST
     * @param $atr - los atributos a evaluar
     */
    public function validaPOST($atr)
    {
        $valid = [
            // verifica que la id sea un entero
            valida::intVal()->validate($atr['id']),
            // verifica que se reciba una cadena de al menos longitud 2
            valida::stringType()->length(2)->validate($atr['nombre']),
            // verifica que se reciba un correo
            valida::email()->validate($atr['correo']),
            // verifica que no esté en blanco la contraseña
            valida::notBlank()->validate($atr['clave_acceso'])
        ];
                                                 
    }

    /**
     * Hace las validaciones para un método PATCH
     * @param type array $atr - atributos a evaluar
     */
    public function validaPATCH($atr)
    {
        // es análogo al de POST
        $valid = [
            valida::intVal()->validate($atr['id']),
            valida::stringType()->length(2)->validate($atr['nombre']),
            valida::email()->validate($atr['correo']),
            valida::notBlank()->validate($atr['clave_acceso'])
        ];
    }

    /**
     * Obtiene todos los usuarios de la tabla usuarios
     */
    public function todos()
    {
        $usuarios = Models\Usuario::get(); // usa la función get() de Eloquent

        if($usuarios) {
            echo self::encode($usuarios); // muestra los usuarios agregados
        }    
    }

    /**
     * Obtiene un usuario por su id
     * @param type Slim\Http\Request $request - la solicitud http
     * @param type Slim\Http\Response $response - la respuesta http
     * @param type array $args - argumentos para la función
     */
    public function getID($request, $response, $args)
    {
        $id = $args['id'];

        $valid = [v::intVal()->validate($id)]; //hace la validación de la id

        // si la validación resulta cierta
        if ($this->validate($valid) == true){
            $usuario = Models\Usuario::find($id); // busca la id en la tabla
            if ($usuario){
                // si encuentra al usuario lo muestra
                echo self::encode($usuario);
            } else {
                // si no hay un usuario regresa un error 404 (not found)
                $status = 404; 
                echo->$this->error('get#usuario{id}',
                                   $request->getUri()->getPath(),
                                   $status);
                return $response->withStatus($status); 
            }
        } else {
            // si la validación es falsa, regresa un error de bad request 
            return $response->withStatus(400);
        }
    }   
}